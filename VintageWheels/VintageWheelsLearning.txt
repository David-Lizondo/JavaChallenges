About the Project

The "VintageWheels" project is a Java program that presents an object-oriented class hierarchy related to classic vehicles, including cars and motorcycles. The project meets the following requirements:

Includes at least 10 classes: Classes have been defined for classic vehicles such as the Ford Mustang, Volkswagen Beetle, Jaguar E-Type, Chevrolet Camaro, Fiat 500, Honda CB750, BMW R75/5, Triumph Bonneville, Vespa 125, and Harley-Davidson Sportster.

Each class contains at least one property: Each class includes properties like model, horsepower, color, year, and country of origin, in addition to specific attributes for some classes.

At least 5 private properties are used: Each class uses private properties to encapsulate data and maintain data integrity.

Getters and setters are provided: Each private property has getter and setter methods for controlled access and modification of data.

All classes have at least one custom constructor: Each class has a custom constructor to efficiently initialize properties.

The project also includes a main class called "VintageWheels," which is responsible for instantiating objects of the implemented classes. The primary goal of the project is to demonstrate how class hierarchies can be created and organized in Java, applying object-oriented programming concepts such as inheritance and encapsulation.

In summary, "VintageWheels" is a project that showcases the structure of classes and objects for representing classic vehicles, which could be useful in a context related to managing information about these vehicles.

Understanding My Progress

During the development of the "VintageWheels" project, several key concepts of object-oriented programming (OOP) and software development were addressed. Here is a brief description of the concepts and what was learned:

1-Classes and Objects: In "VintageWheels," multiple classes were created to represent classic vehicles, such as cars and motorcycles. Each class defines the properties and behaviors of a specific type of vehicle. Objects are instances of these classes and encapsulate related data and functionality.

2-Inheritance: The concept of inheritance was used to organize the classes into a hierarchy. The "Vehicle" class was established as the base class (parent class) containing properties and methods common to all vehicles, and the child classes inherit these features and can add specific attributes.

3-Encapsulation: Encapsulation was applied by defining private properties in the classes. This means that data is kept hidden and accessed through getter and setter methods, ensuring data integrity and allowing for more precise control.

4-Custom Constructors: Each class in the project has at least one custom constructor. These constructors allow for the efficient initialization of object properties during their creation.

5-Getter and Setter: Getter methods were implemented to access property values, and setter methods were implemented to modify them. This facilitates controlled access to object data.

6-Use of Java: The project was developed using the Java programming language. Java is widely used in software development due to its portability, security, and flexibility.

In summary, "VintageWheels" provided an opportunity to apply the fundamentals of object-oriented programming, including class creation, inheritance, encapsulation, and the implementation of constructors and getter/setter methods. These concepts are essential in object-based software development and can be applied in a variety of projects and applications.